/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
:root {
  --media-bar-row-height: 56px; }

.media-bar {
  position: fixed;
  bottom: var(--taskbar-height, 40px);
  width: 100%;
  z-index: 3;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: bottom 0.195s 0ms cubic-bezier(0, 0, 0.2, 1);
  pointer-events: none; }
  .media-bar__fab {
    margin: 1rem;
    pointer-events: auto; }
    .media-bar__fab .mdc-fab__icon {
      pointer-events: none;
      transition: transform 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1); }
    .media-bar__fab .mdc-checkbox__native-control:enabled:checked ~ .mdc-fab__icon {
      transform: rotate(180deg); }
  @media (min-width: 840px) {
    .media-bar__fab {
      margin: 1.5rem; } }
  .media-bar__bar {
    width: 100%;
    overflow: hidden;
    pointer-events: auto;
    box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);
    transition: box-shadow 0.195s 0ms cubic-bezier(0, 0, 0.2, 1);
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: space-between;
    box-sizing: border-box; }
  .media-bar--from-top {
    flex-direction: column-reverse;
    position: absolute;
    top: 0;
    bottom: auto;
    transition: top 0.195s 0ms cubic-bezier(0, 0, 0.2, 1); }
    .media-bar--from-top .media-bar__fab .mdc-fab__icon {
      transform: rotate(180deg);
      transition: transform 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1); }
    .media-bar--from-top .media-bar__fab .mdc-checkbox__native-control:enabled:checked ~ .mdc-fab__icon {
      transform: rotate(0); }
    .media-bar--from-top .media-bar__bar {
      box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12); }
    .media-bar--from-top.media-bar--hidden {
      top: calc( var(--media-bar-row-height, $media-bar-row-height) - (var(--media-bar-row-height, $media-bar-row-height)*2) - 4px);
      bottom: auto;
      transition: top 0.225s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
      .media-bar--from-top.media-bar--hidden.media-bar--card {
        top: calc( var(--media-bar-row-height, $media-bar-row-height) - (var(--media-bar-row-height, $media-bar-row-height)*2) - 4px - var(--mdc-layout-grid-margin-desktop, 24px));
        bottom: auto; }
  .media-bar--hidden {
    transition: bottom 0.225s 0ms cubic-bezier(0.4, 0, 0.6, 1);
    bottom: calc(76px - var(--taskbar-height, 40px) - var(--media-bar-row-height, $media-bar-row-height)); }
    .media-bar--hidden .media-bar__bar {
      box-shadow: none;
      transition: box-shadow 0.225s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
  .media-bar--card {
    padding: var(--mdc-layout-grid-margin-desktop, 24px);
    box-sizing: border-box; }
    .media-bar--card .media-bar__bar {
      border-radius: 2px;
      box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }
    .media-bar--card.media-bar--hidden {
      bottom: calc(28px - var(--taskbar-height, 40px) - var(--media-bar-row-height, $media-bar-row-height) + var(--mdc-layout-grid-margin-desktop, 24px)); }
      .media-bar--card.media-bar--hidden .media-bar__bar {
        box-shadow: none; }
  .media-bar__row {
    display: flex;
    position: relative;
    align-items: center;
    box-sizing: border-box;
    width: 100%;
    height: auto;
    min-height: 56px;
    min-height: var(--media-bar-row-height, 56px); }
  .media-bar__section {
    display: inline-flex;
    flex: 1;
    align-items: center;
    justify-content: center;
    min-width: 0;
    height: 100%;
    z-index: 1; }
    .media-bar__section--align-start {
      justify-content: flex-start;
      order: -1; }
    .media-bar__section--align-end {
      justify-content: flex-end;
      order: 1; }
    .media-bar__section--shrink-to-fit {
      flex: none; }
  .media-bar__album-icon {
    padding: 0 24px;
    color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)); }
  .media-bar__icon {
    padding: 12px;
    color: rgba(0, 0, 0, 0.54);
    user-select: none;
    border: none;
    background-color: transparent;
    outline: none; }
  .mdc-theme--dark .media-bar__icon {
    color: white; }
  .media-bar--main-button {
    width: 40px;
    width: calc(var(--media-bar-row-height, $media-bar-row-height) - 16px);
    height: 40px;
    height: calc(var(--media-bar-row-height, $media-bar-row-height) - 16px);
    background-color: var(--mdc-theme-primary, #3f51b5);
    padding: 0;
    margin: 0 12px;
    border-radius: 50%;
    color: var(--mdc-theme-text-primary-on-primary, white);
    line-height: 40px;
    line-height: calc(var(--media-bar-row-height, $media-bar-row-height) - 16px);
    text-align: center; }
  .media-bar__track-info {
    height: 56px;
    height: var(--media-bar-row-height, 56px);
    overflow: hidden;
    display: flex;
    align-items: center; }
    .media-bar__track-info .mdc-list, .media-bar__track-info .mdc-list-item, .media-bar__track-info .mdc-list-item__text, .media-bar__track-info .mdc-list-item__text * {
      padding: 0;
      width: 100%;
      text-overflow: ellipsis;
      overflow: hidden; }
  .media-bar .mdc-linear-progress .mdc-linear-progress__bar-inner {
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786); }

@media (max-width: 839px) and (min-width: 480px) {
  .media-bar--card {
    padding: var(--mdc-layout-grid-margin-tablet, 16px); }
    .media-bar--card.media-bar--hidden {
      bottom: calc(44px - var(--taskbar-height, 40px) - var(--media-bar-row-height, $media-bar-row-height) + var(--mdc-layout-grid-margin-tablet, 16px)); }
      .media-bar--card.media-bar--hidden.media-bar--from-top {
        top: calc( var(--media-bar-row-height, $media-bar-row-height) - (var(--media-bar-row-height, $media-bar-row-height)*2) - 4px - var(--mdc-layout-grid-margin-tablet, 16px));
        bottom: auto; } }

@media (max-width: 479px) {
  .media-bar--card {
    padding: var(--mdc-layout-grid-margin-phone, 16px); }
    .media-bar--card.media-bar--hidden {
      bottom: calc(44px - var(--taskbar-height, 40px) - var(--media-bar-row-height, $media-bar-row-height) + var(--mdc-layout-grid-margin-phone, 16px)); }
      .media-bar--card.media-bar--hidden.media-bar--from-top {
        top: calc( var(--media-bar-row-height, $media-bar-row-height) - (var(--media-bar-row-height, $media-bar-row-height)*2) - 4px - var(--mdc-layout-grid-margin-phone, 16px));
        bottom: auto; } }
